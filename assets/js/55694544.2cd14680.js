"use strict";(self.webpackChunkmy_gh_page=self.webpackChunkmy_gh_page||[]).push([[859],{8750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(4848),s=t(8453);const o={title:"Getting Started with XCM: A Step-by-Step Guide",description:"Learn how to use xcm-simulator and xcm-emulator for testing and tinkering with Cross-Consensus Messaging (XCM) in Polkadot, including technical details and practical examples.",date:new Date("2024-07-30T00:00:00.000Z"),permalink:"getting-started-with-xcm",authors:"truongnguyenptn",tags:["blockchain","polkadot","xcm"]},l=void 0,r={permalink:"/truongnguyenptn-blog/blog/2024/07/31/xcm",editUrl:"https://github.com/truongnguyenptn/truongnguyenptn.github.io/tree/main/blog/2024/07/31/xcm.md",source:"@site/blog/2024/07/31/xcm.md",title:"Getting Started with XCM: A Step-by-Step Guide",description:"Learn how to use xcm-simulator and xcm-emulator for testing and tinkering with Cross-Consensus Messaging (XCM) in Polkadot, including technical details and practical examples.",date:"2024-07-30T00:00:00.000Z",tags:[{inline:!1,label:"Blockchain",permalink:"/truongnguyenptn-blog/blog/tags/blockchain",description:"Tag for blockchain related posts"},{inline:!1,label:"Polkadot",permalink:"/truongnguyenptn-blog/blog/tags/polkadot",description:"Tag for Polkadot related posts"},{inline:!0,label:"xcm",permalink:"/truongnguyenptn-blog/blog/tags/xcm"}],readingTime:3.27,hasTruncateMarker:!0,authors:[{name:"Truongnguyen",title:"Administrator",url:"https://github.com/truongnguyenptn",key:"truongnguyenptn"}],frontMatter:{title:"Getting Started with XCM: A Step-by-Step Guide",description:"Learn how to use xcm-simulator and xcm-emulator for testing and tinkering with Cross-Consensus Messaging (XCM) in Polkadot, including technical details and practical examples.",date:"2024-07-30T00:00:00.000Z",permalink:"getting-started-with-xcm",authors:"truongnguyenptn",tags:["blockchain","polkadot","xcm"]},unlisted:!1,prevItem:{title:"Understanding Polkadot\u2019s Networking Protocol",permalink:"/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network"},nextItem:{title:"Welcome",permalink:"/truongnguyenptn-blog/blog/welcome"}},a={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Understanding XCM",id:"understanding-xcm",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Getting Started with XCM",id:"getting-started-with-xcm",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Cloning the Repository",id:"cloning-the-repository",level:3},{value:"Running the Examples",id:"running-the-examples",level:2},{value:"Using xcm-simulator",id:"using-xcm-simulator",level:2},{value:"Setting Up xcm-simulator",id:"setting-up-xcm-simulator",level:3},{value:"Example: Simple Token Transfer",id:"example-simple-token-transfer",level:3},{value:"XCM Message",id:"xcm-message",level:4},{value:"Using xcm-emulator",id:"using-xcm-emulator",level:2},{value:"Setting Up xcm-emulator",id:"setting-up-xcm-emulator",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Welcome to the Cross-Consensus Messaging (XCM) documentation! XCM is a language for communicating intentions between consensus systems. Whether you're a developer, a blockchain enthusiast, or just interested in Polkadot, this guide aims to provide you with an easy-to-understand and comprehensive introduction to XCM."}),"\n",(0,i.jsx)(n.p,{children:"In this guide, we'll explore the fundamentals of XCM, how to configure it, and practical examples using the xcm-simulator and xcm-emulator."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-xcm",children:"Understanding XCM"}),"\n",(0,i.jsx)(n.p,{children:"XCM enables different consensus systems to communicate with each other. Common cross-consensus use-cases include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sending tokens between blockchains"}),"\n",(0,i.jsx)(n.li,{children:"Locking assets on one blockchain to gain some benefit on a smart contract on another blockchain"}),"\n",(0,i.jsx)(n.li,{children:"Calling specific functions on another blockchain"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asynchronous:"})," XCMs in no way assume that the sender will be blocking on its completion."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Absolute:"})," XCMs are assumed to be delivered and interpreted accurately, in order and in a timely fashion."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asymmetric:"})," XCMs, by default, do not have results that let the sender know that the message was executed correctly."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Agnostic:"})," XCM makes no assumptions about the nature of the consensus systems between which the messages are being passed."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started-with-xcm",children:"Getting Started with XCM"}),"\n",(0,i.jsx)(n.p,{children:"To get started with XCM, you'll need to set up your environment and understand the tools available for testing and simulating XCM messages."}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rust & Cargo:"})," Ensure you have a stable Rust version and Cargo installed. Here's an ",(0,i.jsx)(n.a,{href:"https://doc.rust-lang.org/cargo/getting-started/installation.html",children:"installation guide"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cloning-the-repository",children:"Cloning the Repository"}),"\n",(0,i.jsx)(n.p,{children:"All examples in this documentation are located in the repository. First, clone the repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clone git@github.com:paritytech/xcm-docs.git\ncd xcm-docs/examples\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-the-examples",children:"Running the Examples"}),"\n",(0,i.jsx)(n.p,{children:"To run the first-look example, use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cargo test -p xcm-examples para_a_simple_transfer -- --nocapture\n"})}),"\n",(0,i.jsx)(n.p,{children:"You should see the following output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"running 1 test\ntest first_look::tests::para_a_simple_transfer ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.01s\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-xcm-simulator",children:"Using xcm-simulator"}),"\n",(0,i.jsx)(n.p,{children:"Setting up a live network with multiple connected parachains for testing XCM can be challenging. The xcm-simulator provides a solution by simulating a network using mock runtimes for a relay chain and parachains."}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-xcm-simulator",children:"Setting Up xcm-simulator"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"xcm-simulator uses mock relay chain and parachain runtime."}),"\n",(0,i.jsx)(n.li,{children:"It allows minimum runtime modules for XCM testing and playground."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Running Tests:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"xcm-simulator is useful for unit tests of XCM-related pallets."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-simple-token-transfer",children:"Example: Simple Token Transfer"}),"\n",(0,i.jsx)(n.p,{children:"In this example, we withdraw the native token from Alice's account and deposit it into Bob's account. This message simulates a transfer between two accounts in the same consensus system (ParaA)."}),"\n",(0,i.jsx)(n.h4,{id:"xcm-message",children:"XCM Message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let message = Xcm(vec![\n    WithdrawAsset((Here, amount).into()),\n    BuyExecution { fees: (Here, amount).into(), weight_limit: WeightLimit::Unlimited },\n    DepositAsset {\n        assets: All.into(),\n        beneficiary: MultiLocation {\n            parents: 0,\n            interior: Junction::AccountId32 {\n                network: None,\n                id: BOB.clone().into()\n            }.into(),\n        }.into()\n    }\n]);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WithdrawAsset:"})," Moves tokens from Alice's account to the holding register."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BuyExecution:"})," Pays for the execution of the XCM instructions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DepositAsset:"})," Deposits the remaining tokens into Bob's account."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"using-xcm-emulator",children:"Using xcm-emulator"}),"\n",(0,i.jsx)(n.p,{children:"The xcm-emulator uses production relay chain and parachain runtime, allowing users to plug in runtimes like Kusama, Statemine, and Karura. It verifies if specific XCM messages work in live networks."}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-xcm-emulator",children:"Setting Up xcm-emulator"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"xcm-emulator uses production relay chain and parachain runtime."}),"\n",(0,i.jsx)(n.li,{children:"Verify messages in live Kusama networks."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Running Tests:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Useful for integration tests and XCM message playgrounds."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Message delivery and execution assumptions."}),"\n",(0,i.jsxs)(n.li,{children:["Possible reasons for message failures:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Number of messages in one block limitation."}),"\n",(0,i.jsx)(n.li,{children:"No HRMP channel for messages."}),"\n",(0,i.jsx)(n.li,{children:"Relay chain or parachain running out of reserved weights for message execution."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["Now that you have a basic understanding of XCM and how to use xcm-simulator and xcm-emulator, you can start building and testing your cross-consensus messaging solutions. For more detailed information, refer to the ",(0,i.jsx)(n.a,{href:"https://github.com/paritytech/xcm-docs",children:"XCM documentation"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Happy building!"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);