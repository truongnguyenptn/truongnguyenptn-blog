<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://truongnguyenptn.github.io/truongnguyenptn-blog/blog</id>
    <title>Truongnguyenptn's Note Blog</title>
    <updated>2024-07-30T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog"/>
    <subtitle>Truongnguyenptn's Note Blog</subtitle>
    <icon>https://truongnguyenptn.github.io/truongnguyenptn-blog/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Understanding Polkadot’s Networking Protocol]]></title>
        <id>https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network</id>
        <link href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network"/>
        <updated>2024-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Explore the fundamental concepts of Polkadot's networking protocol, from network types to node roles, in a simple and intuitive manner.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#introduction">​</a></h2>
<p>Polkadot is not just another blockchain; it's a paradigm shift in blockchain architecture. Unlike traditional monolithic blockchains, Polkadot envisions a future of interconnected chains, ushering in a new era of cross-chain interoperability.</p>
<p>Imagine a network where specialized blockchains, each optimized for specific tasks, seamlessly communicate and transact with one another. This is the essence of Polkadot.</p>
<p>Ready to dive into the world of Polkadot’s networking protocol? Let's explore the fundamental concepts, from network types to node roles, in a simple and intuitive manner.</p>
<p><img decoding="async" loading="lazy" alt="Polkadot Network" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/polkadot-network-b3f7d919e1bd619c314a20b15eed5825.png" width="1200" height="675" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="networks-and-nodes">Networks and Nodes<a class="hash-link" aria-label="Direct link to Networks and Nodes" title="Direct link to Networks and Nodes" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#networks-and-nodes">​</a></h2>
<p>When thinking about building a blockchain, it's useful to consider that boundaries are what define a network. For example, a set of computers connected to a single router can be considered a home network. A firewall might be the boundary that defines an enterprise network. Smaller, isolated networks can be connected to wider area networks through a common communication protocol. Similarly, you can think of a blockchain network as being defined by its boundaries and its isolation from or communication with other blockchains.</p>
<p>Polkadot, using Substrate, allows developers to create any type of blockchain and define its boundaries based on specific requirements. One crucial decision is the type of network you want to build and the role different nodes will play in that network.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="network-types">Network Types<a class="hash-link" aria-label="Direct link to Network Types" title="Direct link to Network Types" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#network-types">​</a></h2>
<p>Polkadot-based blockchains can be used in different network architectures, each with unique features and use cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="private-networks">Private Networks<a class="hash-link" aria-label="Direct link to Private Networks" title="Direct link to Private Networks" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#private-networks">​</a></h3>
<p>Private networks limit access to a restricted set of nodes. These networks are ideal for organizations that require control over who can participate in the network. They ensure privacy and can be customized to meet specific security and operational needs.</p>
<p>For instance, a financial institution might use a private network to conduct internal transactions securely. The control over participants helps maintain the confidentiality and integrity of sensitive data. Additionally, private networks can be tailored to comply with regulatory requirements, providing a flexible solution for enterprise needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="solo-chains">Solo Chains<a class="hash-link" aria-label="Direct link to Solo Chains" title="Direct link to Solo Chains" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#solo-chains">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Solo Chains" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/solo-chains-da4a0f21bde07a789d58d24bf2a27da7.png" width="900" height="600" class="img_ev3q"></p>
<p>Solo chains operate independently and implement their own security protocols. They don't connect or communicate with any other chains. Bitcoin and Ethereum are examples of solo chains. While robust, they do not benefit from the shared security and interoperability features of Polkadot.</p>
<p>Solo chains are like standalone applications. They are responsible for their own security, consensus, and operations. This independence can be beneficial for projects that require full control over their blockchain, but it comes at the cost of isolation from other blockchain networks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="relay-chains">Relay Chains<a class="hash-link" aria-label="Direct link to Relay Chains" title="Direct link to Relay Chains" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#relay-chains">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Solo Chains" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/relay-chains-390ce37d2c03f1ea43205a40669f854b.png" width="800" height="360" class="img_ev3q"></p>
<p>Relay chains provide decentralized security and communication for other chains that connect to them. Kusama and Polkadot are examples. Relay chains act as the backbone of the network, offering security and consensus for connected parachains. This allows these parachains to focus on their specific functions without worrying about underlying security.</p>
<p>Relay chains are the heart of Polkadot's ecosystem. They manage the overall network security and facilitate communication between different parachains. By leveraging the relay chain's security, parachains can operate more efficiently and securely, enabling a diverse range of applications to coexist within the same network.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="parachains">Parachains<a class="hash-link" aria-label="Direct link to Parachains" title="Direct link to Parachains" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#parachains">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Para Chains" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/para-chains-6ae1a12045b219846a4fc7ffc9a0c655.png" width="1200" height="675" class="img_ev3q"></p>
<p>Parachains connect to a relay chain and can communicate with other chains using the same relay chain. Parachains depend on the relay chain to finalize blocks and must implement the same consensus protocol as the relay chain. This setup allows parachains to interoperate seamlessly, leveraging the relay chain's security while focusing on specialized tasks.</p>
<p><img decoding="async" loading="lazy" alt="Para Chains Architecture" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/para-chains-architecture-3c75ae5cbe814515ac4934d2152275c2.png" width="1920" height="800" class="img_ev3q"></p>
<p>Parachains are specialized blockchains tailored for specific use cases. For example, one parachain might be optimized for decentralized finance (DeFi), while another might focus on supply chain management. The shared security model of the relay chain enables parachains to benefit from robust security measures without duplicating efforts, fostering innovation and efficiency.</p>
<p><img decoding="async" loading="lazy" alt="Para Chains Architecture" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/para-chains-shared-model-185f7dfab752399a0a93d5903d4bd2b7.png" width="1400" height="1242" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="node-types">Node Types<a class="hash-link" aria-label="Direct link to Node Types" title="Direct link to Node Types" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#node-types">​</a></h2>
<p>Blockchains require network nodes to be synchronized to present a consistent and up-to-date view of the blockchain state. Each synchronized node stores a copy of the blockchain and keeps track of incoming transactions. However, maintaining a full copy of an entire blockchain requires significant storage and computing resources. To address this, there are different types of nodes that interact with the chain:</p>
<p><img decoding="async" loading="lazy" alt="Blockchain Network" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/blockchain-network-0465a70d08d0d85432e751424b3db0ad.png" width="841" height="428" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="full-nodes">Full Nodes<a class="hash-link" aria-label="Direct link to Full Nodes" title="Direct link to Full Nodes" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#full-nodes">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Full Node" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/full-node-384fd39cacb6893d6b10f70dbfb4d289.png" width="647" height="543" class="img_ev3q"></p>
<p>Full nodes are a critical part of the blockchain network infrastructure and are the most common node type. They store blockchain data and typically participate in common blockchain operations, such as authoring and validating blocks, receiving and verifying transactions, and serving data in response to user requests.</p>
<p>By default, full nodes store only the most recent 256 blocks and discard older state, except for the genesis block, to prevent indefinite growth and excessive disk space usage. They retain all block headers to validate the state and can rebuild the blockchain state by executing all blocks from the genesis block.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="archive-nodes">Archive Nodes<a class="hash-link" aria-label="Direct link to Archive Nodes" title="Direct link to Archive Nodes" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#archive-nodes">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Archive Node" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/archive-node-8c27a5696489eae6bf05d5e755194b54.png" width="647" height="538" class="img_ev3q"></p>
<p>Archive nodes are similar to full nodes but store all past blocks with complete state for every block. They are used by utilities—such as block explorers and wallets—that need access to historical information. Archive nodes require a lot of disk space but make querying past states faster and more efficient.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="light-client-nodes">Light Client Nodes<a class="hash-link" aria-label="Direct link to Light Client Nodes" title="Direct link to Light Client Nodes" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#light-client-nodes">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Light Client Nodes" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/light-client-node-c5ad579f7b95e9059a4f345c64621215.png" width="647" height="542" class="img_ev3q"></p>
<p>Light client nodes enable connection to a Substrate network with minimal hardware requirements. They can be embedded into web-based applications, browser extensions, mobile device applications, or IoT devices. Light client nodes provide a runtime and access to the current state through RPC endpoints but do not participate in blockchain or network operations and do not store past blocks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="node-communication-and-maintenance">Node Communication and Maintenance<a class="hash-link" aria-label="Direct link to Node Communication and Maintenance" title="Direct link to Node Communication and Maintenance" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#node-communication-and-maintenance">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gossip-protocol">Gossip Protocol<a class="hash-link" aria-label="Direct link to Gossip Protocol" title="Direct link to Gossip Protocol" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#gossip-protocol">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Gossip Protocol" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/protocol-8a7e1ce7c55f098a075d01f547298000.png" width="1920" height="800" class="img_ev3q"></p>
<p>The gossip protocol is a decentralized communication method used by nodes to share information, such as transactions and blocks, with their peers. This protocol ensures that all nodes have a consistent view of the blockchain by propagating data throughout the network efficiently.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="consensus-mechanisms">Consensus Mechanisms<a class="hash-link" aria-label="Direct link to Consensus Mechanisms" title="Direct link to Consensus Mechanisms" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#consensus-mechanisms">​</a></h3>
<p>Polkadot uses Nominated Proof-of-Stake (NPoS) as its consensus mechanism. NPoS involves validators, nominators, collators, and fishermen to secure the network:</p>
<ul>
<li><strong>Validators</strong>: Secure the relay chain by staking DOT and validating proofs from collators.</li>
<li><strong>Nominators</strong>: Back validators with their stake, helping to select reliable validators.</li>
<li><strong>Collators</strong>: Maintain parachains by collecting transactions and producing proofs for validators.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Nominated Proof-of-Stake" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/n-pos-38013ae0e1f62ee26ede1ee8a04b3bc1.png" width="2000" height="876" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="network-maintenance">Network Maintenance<a class="hash-link" aria-label="Direct link to Network Maintenance" title="Direct link to Network Maintenance" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#network-maintenance">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="forkless-upgrades">Forkless Upgrades<a class="hash-link" aria-label="Direct link to Forkless Upgrades" title="Direct link to Forkless Upgrades" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#forkless-upgrades">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Forkless Upgrades" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/fork-less-upgrade-9bb8cf4342a8d08006a528be085e04d1.png" width="1200" height="675" class="img_ev3q"></p>
<p>Polkadot supports forkless upgrades, allowing the network to upgrade its protocol without creating a new chain or disrupting the ongoing operations. This capability ensures that updates can be deployed smoothly, enhancing the network's functionality and security.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="governance">Governance<a class="hash-link" aria-label="Direct link to Governance" title="Direct link to Governance" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#governance">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Governance" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/governance-2cd2fe76478761519cecf54beb5ca923.png" width="1802" height="1050" class="img_ev3q"></p>
<p>Polkadot features an on-chain governance system where stakeholders can propose and vote on network upgrades and changes. This system includes the Council, Technical Committee, and referendums, providing a decentralized and transparent decision-making process.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="security-measures">Security Measures<a class="hash-link" aria-label="Direct link to Security Measures" title="Direct link to Security Measures" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#security-measures">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Security Measures" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/security-measures-a3e620b78180bc7302322f8084bd0c3e.png" width="768" height="309" class="img_ev3q"></p>
<p>Polkadot's security model involves shared security for parachains, where the relay chain provides robust security to all connected parachains. This model allows parachains to focus on their specific use cases while relying on the relay chain for overall network security.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="comparing-full-nodes-and-light-client-nodes">Comparing Full Nodes and Light Client Nodes<a class="hash-link" aria-label="Direct link to Comparing Full Nodes and Light Client Nodes" title="Direct link to Comparing Full Nodes and Light Client Nodes" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#comparing-full-nodes-and-light-client-nodes">​</a></h2>
<table><thead><tr><th>Feature</th><th>Full Nodes</th><th>Light Nodes</th></tr></thead><tbody><tr><td><strong>Storage Requirements</strong></td><td>Full nodes store a complete copy of the blockchain, which can be extensive. This means they require significant storage capacity.</td><td>Light client nodes have minimal storage needs as they do not store the entire blockchain. Instead, they keep only the necessary information to verify the current state.</td></tr><tr><td><strong>Functionality</strong></td><td>Full nodes perform a wide range of operations, including validating and relaying transactions, maintaining consensus, and serving data requests from other nodes and users.</td><td>Light clients are limited in functionality compared to full nodes. They primarily focus on verifying transactions and accessing blockchain data through RPC endpoints.</td></tr><tr><td><strong>Security</strong></td><td>Full nodes offer a high level of security as they independently verify all transactions and blocks. This makes them less reliant on other nodes for data integrity.</td><td>While light clients are less secure than full nodes, they still offer sufficient security for most use cases by verifying only the necessary parts of the blockchain state.</td></tr><tr><td><strong>Network Participation</strong></td><td>Full nodes contribute to the overall network's health and security by participating actively in the blockchain's operations.</td><td>Light clients do not contribute to the network's consensus or operations. They are designed for ease of access and integration into lightweight applications.</td></tr></tbody></table>
<p><img decoding="async" loading="lazy" alt="Comparison Table" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/light-vs-full-9db3acda17a652be4ed69b0d6b25fd1f.png" width="1600" height="1029" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="node-roles">Node Roles<a class="hash-link" aria-label="Direct link to Node Roles" title="Direct link to Node Roles" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#node-roles">​</a></h2>
<p>Depending on the command-line options specified when starting a node, nodes can play different roles in the progression of the chain and provide different levels of access to the on-chain state. For example, you can limit which nodes are authorized to author new blocks and which can communicate with peers. Nodes can also be restricted to communicate with specific nodes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-to-go-next">Where to Go Next<a class="hash-link" aria-label="Direct link to Where to Go Next" title="Direct link to Where to Go Next" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/30/understanding-polkadot-network#where-to-go-next">​</a></h2>
<p>You can use Substrate to build virtually any type of network—from a completely self-contained and private solo chain to your own relay chain ecosystem or compatible parachains.</p>
<p>To take a deeper dive into networks and node types, explore the following topics:</p>
<ul>
<li>Build a local blockchain</li>
<li>Simulate a network</li>
<li>Add trusted nodes</li>
<li>Authorize specific nodes</li>
</ul>
<p>By understanding the basics of Polkadot’s networking protocol, you are well on your way to leveraging its powerful capabilities to build scalable, interconnected blockchain solutions.</p>]]></content>
        <author>
            <name>Truongnguyen</name>
            <uri>https://github.com/truongnguyenptn</uri>
        </author>
        <category label="Blockchain" term="Blockchain"/>
        <category label="Polkadot" term="Polkadot"/>
        <category label="networking" term="networking"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting Started with XCM: A Step-by-Step Guide]]></title>
        <id>https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm</id>
        <link href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm"/>
        <updated>2024-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to use xcm-simulator and xcm-emulator for testing and tinkering with Cross-Consensus Messaging (XCM) in Polkadot, including technical details and practical examples.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#introduction">​</a></h2>
<p>Welcome to the Cross-Consensus Messaging (XCM) documentation! XCM is a language for communicating intentions between consensus systems. Whether you're a developer, a blockchain enthusiast, or just interested in Polkadot, this guide aims to provide you with an easy-to-understand and comprehensive introduction to XCM.</p>
<p>In this guide, we'll explore the fundamentals of XCM, how to configure it, and practical examples using the xcm-simulator and xcm-emulator.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-xcm">Understanding XCM<a class="hash-link" aria-label="Direct link to Understanding XCM" title="Direct link to Understanding XCM" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#understanding-xcm">​</a></h2>
<p>XCM enables different consensus systems to communicate with each other. Common cross-consensus use-cases include:</p>
<ul>
<li>Sending tokens between blockchains</li>
<li>Locking assets on one blockchain to gain some benefit on a smart contract on another blockchain</li>
<li>Calling specific functions on another blockchain</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="key-concepts">Key Concepts<a class="hash-link" aria-label="Direct link to Key Concepts" title="Direct link to Key Concepts" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#key-concepts">​</a></h3>
<ul>
<li><strong>Asynchronous:</strong> XCMs in no way assume that the sender will be blocking on its completion.</li>
<li><strong>Absolute:</strong> XCMs are assumed to be delivered and interpreted accurately, in order and in a timely fashion.</li>
<li><strong>Asymmetric:</strong> XCMs, by default, do not have results that let the sender know that the message was executed correctly.</li>
<li><strong>Agnostic:</strong> XCM makes no assumptions about the nature of the consensus systems between which the messages are being passed.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-with-xcm">Getting Started with XCM<a class="hash-link" aria-label="Direct link to Getting Started with XCM" title="Direct link to Getting Started with XCM" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#getting-started-with-xcm">​</a></h2>
<p>To get started with XCM, you'll need to set up your environment and understand the tools available for testing and simulating XCM messages.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prerequisites">Prerequisites<a class="hash-link" aria-label="Direct link to Prerequisites" title="Direct link to Prerequisites" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#prerequisites">​</a></h3>
<ul>
<li><strong>Rust &amp; Cargo:</strong> Ensure you have a stable Rust version and Cargo installed. Here's an <a href="https://doc.rust-lang.org/cargo/getting-started/installation.html" target="_blank" rel="noopener noreferrer">installation guide</a>.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloning-the-repository">Cloning the Repository<a class="hash-link" aria-label="Direct link to Cloning the Repository" title="Direct link to Cloning the Repository" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#cloning-the-repository">​</a></h3>
<p>All examples in this documentation are located in the repository. First, clone the repository:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone git@github.com:paritytech/xcm-docs.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd xcm-docs/examples</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-the-examples">Running the Examples<a class="hash-link" aria-label="Direct link to Running the Examples" title="Direct link to Running the Examples" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#running-the-examples">​</a></h2>
<p>To run the first-look example, use the following command:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cargo test -p xcm-examples para_a_simple_transfer -- --nocapture</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You should see the following output:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">running 1 test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test first_look::tests::para_a_simple_transfer ... ok</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.01s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-xcm-simulator">Using xcm-simulator<a class="hash-link" aria-label="Direct link to Using xcm-simulator" title="Direct link to Using xcm-simulator" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#using-xcm-simulator">​</a></h2>
<p>Setting up a live network with multiple connected parachains for testing XCM can be challenging. The xcm-simulator provides a solution by simulating a network using mock runtimes for a relay chain and parachains.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-xcm-simulator">Setting Up xcm-simulator<a class="hash-link" aria-label="Direct link to Setting Up xcm-simulator" title="Direct link to Setting Up xcm-simulator" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#setting-up-xcm-simulator">​</a></h3>
<ol>
<li>
<p><strong>Configuration:</strong></p>
<ul>
<li>xcm-simulator uses mock relay chain and parachain runtime.</li>
<li>It allows minimum runtime modules for XCM testing and playground.</li>
</ul>
</li>
<li>
<p><strong>Running Tests:</strong></p>
<ul>
<li>xcm-simulator is useful for unit tests of XCM-related pallets.</li>
</ul>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-simple-token-transfer">Example: Simple Token Transfer<a class="hash-link" aria-label="Direct link to Example: Simple Token Transfer" title="Direct link to Example: Simple Token Transfer" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#example-simple-token-transfer">​</a></h3>
<p>In this example, we withdraw the native token from Alice's account and deposit it into Bob's account. This message simulates a transfer between two accounts in the same consensus system (ParaA).</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="xcm-message">XCM Message<a class="hash-link" aria-label="Direct link to XCM Message" title="Direct link to XCM Message" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#xcm-message">​</a></h4>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> message </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Xcm</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">WithdrawAsset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Here</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">BuyExecution</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> fees</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Here</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> weight_limit</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">WeightLimit</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Unlimited</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">DepositAsset</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">All</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        beneficiary</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">MultiLocation</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            parents</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            interior</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Junction</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AccountId32</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                network</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">None</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">BOB</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>WithdrawAsset:</strong> Moves tokens from Alice's account to the holding register.</li>
<li><strong>BuyExecution:</strong> Pays for the execution of the XCM instructions.</li>
<li><strong>DepositAsset:</strong> Deposits the remaining tokens into Bob's account.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-xcm-emulator">Using xcm-emulator<a class="hash-link" aria-label="Direct link to Using xcm-emulator" title="Direct link to Using xcm-emulator" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#using-xcm-emulator">​</a></h2>
<p>The xcm-emulator uses production relay chain and parachain runtime, allowing users to plug in runtimes like Kusama, Statemine, and Karura. It verifies if specific XCM messages work in live networks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-xcm-emulator">Setting Up xcm-emulator<a class="hash-link" aria-label="Direct link to Setting Up xcm-emulator" title="Direct link to Setting Up xcm-emulator" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#setting-up-xcm-emulator">​</a></h3>
<ol>
<li>
<p><strong>Configuration:</strong></p>
<ul>
<li>xcm-emulator uses production relay chain and parachain runtime.</li>
<li>Verify messages in live Kusama networks.</li>
</ul>
</li>
<li>
<p><strong>Running Tests:</strong></p>
<ul>
<li>Useful for integration tests and XCM message playgrounds.</li>
</ul>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="limitations">Limitations<a class="hash-link" aria-label="Direct link to Limitations" title="Direct link to Limitations" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#limitations">​</a></h3>
<ul>
<li>Message delivery and execution assumptions.</li>
<li>Possible reasons for message failures:<!-- -->
<ul>
<li>Number of messages in one block limitation.</li>
<li>No HRMP channel for messages.</li>
<li>Relay chain or parachain running out of reserved weights for message execution.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/2024/07/31/xcm#conclusion">​</a></h2>
<p>Now that you have a basic understanding of XCM and how to use xcm-simulator and xcm-emulator, you can start building and testing your cross-consensus messaging solutions. For more detailed information, refer to the <a href="https://github.com/paritytech/xcm-docs" target="_blank" rel="noopener noreferrer">XCM documentation</a>.</p>
<p>Happy building!</p>]]></content>
        <author>
            <name>Truongnguyen</name>
            <uri>https://github.com/truongnguyenptn</uri>
        </author>
        <category label="Blockchain" term="Blockchain"/>
        <category label="Polkadot" term="Polkadot"/>
        <category label="xcm" term="xcm"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/welcome</id>
        <link href="https://truongnguyenptn.github.io/truongnguyenptn-blog/blog/welcome"/>
        <updated>2021-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p>
<p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p>
<p>Regular blog authors can be added to <code>authors.yml</code>.</p>
<p>The blog post date can be extracted from filenames, such as:</p>
<ul>
<li><code>2019-05-30-welcome.md</code></li>
<li><code>2019-05-30-welcome/index.md</code></li>
</ul>
<p>A blog post folder can be convenient to co-locate blog post images:</p>
<p><img decoding="async" loading="lazy" alt="Docusaurus Plushie" src="https://truongnguyenptn.github.io/truongnguyenptn-blog/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p>
<p>The blog supports tags as well!</p>
<p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content>
        <author>
            <name>Truongnguyen</name>
            <uri>https://github.com/truongnguyenptn</uri>
        </author>
        <category label="Uncategorized" term="Uncategorized"/>
    </entry>
</feed>